// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.10;

import {IVariableSupplyAuction} from "./IVariableSupplyAuction.sol";

import {ReentrancyGuard} from "@rari-capital/solmate/src/utils/ReentrancyGuard.sol";

/// @title Variable Supply Auction
/// @author neodaoist
/// @notice Module for variable supply, seller's choice, sealed bid auctions in ETH for ERC-721 tokens
contract VariableSupplyAuction is IVariableSupplyAuction, ReentrancyGuard {
    //

    /*//////////////////////////////////////////////////////////////
                        AUCTION STORAGE
    //////////////////////////////////////////////////////////////*/

    /// @notice The metadata for a given auction
    /// @param minimumRevenue The minimum revenue the seller needs to generate in this auction
    /// @param sellerFundsRecipient The address where funds are sent after the auction
    /// @param startTime The unix timestamp after which the first bid can be placed
    /// @param endOfBidPhase The unix timestamp until which bids can be placed
    /// @param endOfRevealPhase The unix timestamp until which placed bids can be revealed
    /// @param endOfSettlePhase The unix timestamp until which the seller can settle the auction (TODO clarify can vs. must)
    /// @param firstBidTime The unix timestamp when the first bid is placed
    struct Auction {
        uint96 minimumRevenue;
        address sellerFundsRecipient;
        uint32 startTime;
        uint32 endOfBidPhase;
        uint32 endOfRevealPhase;
        uint32 endOfSettlePhase;
        uint32 firstBidTime;
        // bids
    }

    /// @notice The auction for a given seller, if one exists
    /// @dev Only one auction per seller is allowed at once
    mapping(address => Auction) public auctionForSeller;

    /*//////////////////////////////////////////////////////////////
                        CREATE AUCTION
    //////////////////////////////////////////////////////////////*/

    // TODO add UML diagram

    /// @notice Emitted when an auction is created
    /// @param seller The seller of the created auction
    /// @param auction The metadata of the created auction
    event AuctionCreated(address indexed seller, Auction auction);

    /// @notice Creates a variable supply auction
    /// @dev Seller can only have 1 live auction at any one time
    /// @param _minimumRevenue The minimum revenue the seller aims to generate in this auction --
    /// they can settle the auction below this value, but they cannot _not_ settle if the revenue
    /// generated by any price point + edition size combination would be at least this value
    /// @param _sellerFundsRecipient The address to send funds to once the auction is complete
    /// @param _startTime The time that users can begin placing bids
    /// @param _bidPhaseDuration The length of time of the bid phase in seconds
    /// @param _revealPhaseDuration The length of time of the reveal phase in seconds
    /// @param _settlePhaseDuration The length of time of the settle phase in seconds
    function createAuction(
        // TODO add tokenContract via Drops integration
        uint256 _minimumRevenue,
        address _sellerFundsRecipient,
        uint256 _startTime,
        uint256 _bidPhaseDuration,
        uint256 _revealPhaseDuration,
        uint256 _settlePhaseDuration
    ) external nonReentrant {
        // Ensure the seller does not already have a live auction
        require(auctionForSeller[msg.sender].startTime == 0, "ONLY_ONE_LIVE_AUCTION_PER_SELLER");

        // Ensure the funds recipient is specified
        require(_sellerFundsRecipient != address(0), "INVALID_FUNDS_RECIPIENT");

        // Get the auction's storage pointer
        Auction storage auction = auctionForSeller[msg.sender];

        // Store the associated metadata
        auction.minimumRevenue = uint96(_minimumRevenue);
        auction.sellerFundsRecipient = _sellerFundsRecipient;
        auction.startTime = uint32(_startTime);
        auction.endOfBidPhase = uint32(_startTime + _bidPhaseDuration);
        auction.endOfRevealPhase = uint32(_startTime + _bidPhaseDuration + _revealPhaseDuration);
        auction.endOfSettlePhase = uint32(_startTime + _bidPhaseDuration + _revealPhaseDuration + _settlePhaseDuration);

        emit AuctionCreated(msg.sender, auction);
    }
}
